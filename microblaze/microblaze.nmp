// TODO:
// Support MSRs properly
// Implement FPU

let proc    = "microblaze"
let gliss_isize = "32,64"
let bit_order = "uppermost"

// Types
type dword = card(64)
type word = card(32)
type half = card(16)
type byte = card(8)
type bit = card(1)

type u32 = card(32)
type s32 = int(32)
type u16 = card(16)
type u8  = card(8)

type imm16 = card(16)
type imm32 = card(32)

type reg_num = card(5)

let NUM_GPR = 32
let NUM_SPR = 27	
let MEM_ADDR_SIZE = 32

// Register file
reg R [ NUM_GPR, word ]
reg S [ NUM_SPR, word ]
reg PC [ 1, word ] pc=1   // Program counter 
reg nPC [ 1, word ] npc = 1       // Next program counter

// Global memory
mem M [ MEM_ADDR_SIZE, u8 ] progmem=1

// SPR aliases
reg MSR   [ 1, word ] alias = S[1]
reg EAR   [ 1, word ] alias = S[2]
reg ESR   [ 1, word ] alias = S[3]
reg FSR   [ 1, word ] alias = S[4]
reg BTR   [ 1, word ] alias = S[5]
reg EDR   [ 1, word ] alias = S[6]
reg SLR   [ 1, word ] alias = S[7]
reg SHR   [ 1, word ] alias = S[8]
reg PID   [ 1, word ] alias = S[9]
reg ZPR   [ 1, word ] alias = S[10]
reg TLBX  [ 1, word ] alias = S[11]
reg TLBLO [ 1, word ] alias = S[12]
reg TLBHI [ 1, word ] alias = S[13]
reg PVR0  [ 1, word ] alias = S[14]
reg PVR1  [ 1, word ] alias = S[15]
reg PVR2  [ 1, word ] alias = S[16]
reg PVR3  [ 1, word ] alias = S[17]
reg PVR4  [ 1, word ] alias = S[18]
reg PVR5  [ 1, word ] alias = S[19]
reg PVR6  [ 1, word ] alias = S[20]
reg PVR7  [ 1, word ] alias = S[21]
reg PVR8  [ 1, word ] alias = S[22]
reg PVR9  [ 1, word ] alias = S[23]
reg PVR10 [ 1, word ] alias = S[24]
reg PVR11 [ 1, word ] alias = S[25]
reg PVR12 [ 1, word ] alias = S[26]

// GPR aliases
reg RSP   [ 1, word ] alias = R[1]
reg RLR   [ 1, word ] alias = R[15]

// Temporaries
reg _rDST  [ 1, dword ] // DWord so that carry can be calculated

// Carry bit
reg C [ 1, bit ]

// Linked branch support
reg DB   [ 1, bit ]   // Delayed branch?
reg B    [ 1, bit ]   // Branch taken?
reg Btgt [ 1, word ]  // Branch target

// Upper 16 latch
reg immTmp [ 1, s32 ] // Temporary to add on the upper bits...

mode reg_idx(i: card(5)) = R[i]
	syntax = format("r%d", i)
	image = format("%5b", i)
	is_zero = i == 0

mode reg_idx0(i: card(5)) = if i == 0 then 0 else R[i] endif
	syntax = format("r%d", i)
	image = format("%5b", i)
	is_zero = i == 0

// Macro for sign extending an unsigned value of size bits to a signed 32bit/64bit value
macro sext32(value, size) = (coerce(int(32), value) << (32-size)) >> (32-size)
macro sext64(value, size) = (coerce(int(64), value) << (64-size)) >> (64-size)
macro buildImm(immLow) = \
	if immHighValid == 1 then \
		immHigh | immLow \
	else \
		sext32(immLow, 16) \
	endif

// Startup
op init()
	action = 
		{
			//R[0] = 0;
			PC = 0;
			nPC = 4;
		}

// Normal instructions
// Base instruction
op instruction(x: MBlaze_instr)
	syntax = x.syntax
	image = x.image
	action = {
		x.action;

		if B == 1 then
			PC = Btgt;
		else
			PC = nPC;
		endif;

		if DB == 1 then
			nPC = Btgt;
			DB = 0;
		else
			if B == 1 then
				nPC = Btgt + 4;
			else
				nPC = nPC + 4;
			endif;
		endif;

		B = 0;
	}

op MBlaze_instr = MBlaze_typeA | MBlaze_typeB | MBlaze_typeB_noextend

op MBlaze_typeA = MBlaze_typeA_ALU
				| MBlaze_typeA_MUL
				| MBlaze_typeA_BSL
				| MBlaze_typeA_GETPUTD       // Indirect GET/PUT
				| MBlaze_typeA_logic      // OR/AND etc
				| MBlaze_typeA_PCMP       // Pattern matcher
				| MBlaze_typeA_BR         // Unconditional branch
				| MBlaze_typeA_BRC        // Conditional branch
				| MBlaze_typeA_LD         // Loads
				| MBlaze_typeA_ST         // Stores
				| MBlaze_typeA_FPU

op MBlaze_typeB = MBlaze_typeB_extended
                | MBlaze_typeB_notextended

op MBlaze_typeB_inner = MBlaze_typeB_ALU
                      | MBlaze_typeB_MUL
                      | MBlaze_typeB_logic     
                      | MBlaze_typeB_RET        
                      | MBlaze_typeB_BR
                      | MBlaze_typeB_BRC
                      | MBlaze_typeB_LDI
                      | MBlaze_typeB_STI

op MBlaze_typeB_noextend = MBlaze_typeB_BSL
                         | MBlaze_typeB_GET
                         | MBlaze_typeB_PUT
                         | MBlaze_typeB_UTIL
                         | MBlaze_typeB_MFS
                         | MBlaze_typeB_MTS

op MBlaze_typeB_extended(operation: MBlaze_typeB_inner, immHigh: imm16, immLow: imm16)
	syntax = format("%s %d", operation.syntax, coerce(int(32), immHigh) << 16 | immLow)
	image = format("101100 00000 00000 %16b %s %16b", immHigh, operation, immLow)
	action = 
	{
		immTmp = immHigh << 16;
		immTmp = immTmp | immLow;
		operation.action;
	}

op MBlaze_typeB_notextended(operation: MBlaze_typeB_inner, imm: imm16)
	syntax = format("%s %d", operation.syntax, imm)
	image = format("%s %16b", operation, imm)
	action = 
	{
		immTmp = sext32(imm, 16);
		operation.action;
	}

op MBlaze_typeA_ALU(keep: bit, carry: bit, rsub: bit, rD: reg_idx, rA: reg_idx0, rB: reg_idx0, extra: card(11))
	syntax = 
		if rsub == 1 then
			if extra == 0 then
				if keep == 1  && carry == 1 then
					format("rsubkc %s, %s, %s ", rD, rA, rB)
				else 
					if keep == 1 then
						format("rsubk   %s, %s, %s", rD, rA, rB)
					else 
						if carry == 1 then
							format("rsubc   %s, %s, %s", rD, rA, rB)
						else
							format("rsub    %s, %s, %s", rD, rA, rB)
						endif
					endif
				endif
			else 
				if extra == 1 then
					format("cmp     %s, %s, %s", rD, rA, rB)
				else 
					if extra == 3 then
						format("cmpu    %s, %s, %s", rD, rA, rB)
					else
						format("WUTLOL     %s, %s, %s", rD, rA, rB)
					endif
				endif
			endif
		else
			if keep == 1  && carry == 1 then
				format("addkc   %s, %s, %s", rD, rA, rB)
			else 
				if keep == 1 then
					format("addk    %s, %s, %s", rD, rA, rB)
				else 
					if carry == 1 then
						format("addc    %s, %s, %s", rD, rA, rB)
					else
						format("add     %s, %s, %s", rD, rA, rB)
					endif
				endif
			endif
		endif

	image = format("000 %1b %1b %1b %s %s %s %11b", keep, carry, rsub, rD, rA, rB, extra)

	action = 
	{
		if rsub == 1 then
			_rDST = rB + ~rA + 1;
		else // Standard addition
			_rDST = rA + rB;
		endif;

		// Sort out carry
		if carry == 1 then
			if C == 1 then
				_rDST = _rDST + 1;
			endif;
		endif;

		if keep == 0 then
			if _rDST<32..32> == 1 then
				C = 1;
			else
				C = 0;
			endif;
		endif;

		rD = _rDST;
	}

op MBlaze_typeB_ALU(keep: bit, carry: bit, rsub: bit, rD: reg_idx, rA: reg_idx0)
	syntax = 
		format("%s%s%s %s, %s,", (if rsub == 1 then "rsubi" else "addi" endif), (if keep == 1 then "k" else "" endif), (if carry == 1 then "c" else "" endif), rD, rA)

	image = format("001 %1b %1b %1b %s %s", keep, carry, rsub, rD, rA)

	action = 
	{
		// Add on the upper 16 bits
		//immTmp = buildImm(imm);

		if rsub == 1 then
			_rDST = immTmp + ~rA + 1;
		else // Standard addition
			_rDST = rA + immTmp;
		endif;

		// Sort out carry
		if carry == 1 then
			if C == 1 then
				_rDST = _rDST + 1;
			endif;
		endif;

		if keep == 0 then
			if _rDST<32..32> == 1 then
				C = 1;
			else
				C = 0;
			endif;
		endif;

		rD = _rDST;
	}

op MBlaze_typeA_MUL(rD: reg_idx, rA: reg_idx0, rB: reg_idx0, extra: card(11))
	syntax = 
		switch (extra)
		{
		case 0: format("mul     %s, %s, %s", rD, rA, rB)
		case 1: format("mulh    %s, %s, %s", rD, rA, rB)
		case 3: format("mulhu   %s, %s, %s", rD, rA, rB)
		case 2: format("mulhsu  %s, %s, %s", rD, rA, rB)
		default: format("DEAD    %s, %s, %s", rD, rA, rB)
		}

	image = format("010000 %s %s %s %11b", rD, rA, rB, extra)

	action = 
	{
		switch(extra)
		{
			case 0: _rDST = rA * rB;
			case 1: _rDST = (sext64(rA, 32) * sext64(rB, 32)) >> 32;
			case 3: _rDST = (coerce(card(64), rA) * coerce(card(64), rB)) >> 32;
			case 2: _rDST = (sext64(rA, 32) * coerce(card(64), rB)) >> 32;
		};

		rD = _rDST;
	}

op MBlaze_typeB_MUL(rD: reg_idx, rA: reg_idx0)
	syntax = format("muli    %s, %s,", rD, rA)

	image = format("011000 %s %s", rD, rA)

	action = 
	{
		rD = rA * immTmp;
	}

op MBlaze_typeA_BSL(rD: reg_idx, rA: reg_idx0, rB: reg_idx0, extra: card(11))
	syntax = 
		if extra == 0 then
			format("bsrl    %s,%s,%s", rD, rA, rB)
		else
			if extra<9..9> == 1 then
				format("bsra     %s,%s,%s", rD, rA, rB)
			else
				if extra<10..10> == 1 then
					format("bsll     %s,%s,%s", rD, rA, rB)
				else
					format("DEAD %s,%s,%s", rD, rA, rB)
				endif
			endif
		endif

	image = format("010001 %s %s %s %11b", rD, rA, rB, extra)

	action = 
	{
		if extra == 0 then
			rD = rA >> rB;
		else
			if extra<9..9> == 1 then
				rD = coerce(int(32), rA) >> rB;
			else
				if extra<10..10> == 1 then
					rD = rA << rB;
				endif;
			endif;
		endif;
	}

// I'm not implementing this properly for now...
// I don't actually know if this supports IO...
op MBlaze_typeA_GETPUTD(T: bit, N: bit, E: bit, A: bit, C: bit, rD: reg_num, rA: reg_num, rB: reg_num)
	syntax = format("%s%s%s%s%s%sd r%d, r%d, r%d", 
					if T == 1 then "t" else "" endif,
				    if N == 1 then "n" else "" endif,
				    if E == 1 then "e" else "" endif,
				    if A == 1 then "a" else "" endif,
				    if C == 1 then "c" else "" endif,
					if rD > 0 then "get" else "put" endif, rD, rA, rB)
	image = format("010011 %5b %5b %5b 0 %1b %1b %1b %1b %1b 00000", rD, rA, rB, N, C, T, A, E)

	action = 
	{
		if rD > 0 then
			R[rD] = 0xDEADBEEF;
		endif;
	}

op MBlaze_typeB_BSL(rD: reg_idx, rA: reg_idx0, extra: card(11), imm: card(5))
	syntax = 
		if extra == 0 then
			format("bsrli    %s,%s,%d", rD, rA, imm)
		else
			if extra<4..4> == 1 then
				format("bsrai    %s,%s,%d", rD, rA, imm)
			else
				if extra<5..5> == 1 then
					format("bslli    %s,%s,%d", rD, rA, imm)
				else
					format("DEAD %s,%s,%d", rD, rA, imm)
				endif
			endif
		endif

	image = format("011001 %s %s %11b %5b", rD, rA, extra, imm)

	action = 
	{
		if extra == 0 then
			rD = rA >> imm;
		else
			if extra<4..4> == 1 then
				rD = coerce(int(32), rA) >> imm;
			else
				if extra<5..5> == 1 then
					rD = rA << imm;
				endif;
			endif;
		endif;
	}

op MBlaze_typeB_GET(T: bit, N: bit, E: bit, A: bit, C: bit, rD: reg_idx, fsln: card(4))
	syntax = format("%s%s%s%s%sget %s,rfsl%d", 
					if T == 1 then "t" else "" endif,
				    if N == 1 then "n" else "" endif,
				    if E == 1 then "e" else "" endif,
				    if A == 1 then "a" else "" endif,
				    if C == 1 then "c" else "" endif, rD, fsln)

	image = format("011011 %s 00000 0 %1b %1b %1b %1b %1b 000000 %4b", rD, N, C, T, A, E, fsln)

	action = 
	{
		rD = 0xDEADBEEF;
	}

op MBlaze_typeB_PUT(T: bit, N: bit, E: bit, A: bit, C: bit, rA: reg_idx0, fsln: card(4))
	syntax = format("%s%s%s%s%sput %s,rfsl%d", 
					if T == 1 then "t" else "" endif,
				    if N == 1 then "n" else "" endif,
				    if E == 1 then "e" else "" endif,
				    if A == 1 then "a" else "" endif,
				    if C == 1 then "c" else "" endif, rA, fsln)

	image = format("011011 00000 %s 1 %1b %1b %1b %1b %1b 000000 %4b", rA, N, C, T, A, E, fsln)

	action = 
	{
		// NOP...
	}

op MBlaze_typeA_logic(opc: card(2), rD: reg_idx, rA: reg_idx0, rB: reg_idx0)
	syntax = switch(opc)
	{
		case 0: format("or      %s,%s,%s", rD, rA, rB)
		case 1: format("and     %s,%s,%s", rD, rA, rB)
		case 2: format("xor     %s,%s,%s", rD, rA, rB)
		case 3: format("andn    %s,%s,%s", rD, rA, rB)
	}

	image = format("1000 %2b %s %s %s 00000000000", opc, rD, rA, rB)

	action = 
	{
		switch(opc)
		{
			case 0: rD = rA | rB;
			case 1: rD = rA & rB;
			case 2: rD = rA ^ rB;
			case 3: rD = rA & ~rB;
		};
	}

op MBlaze_typeA_PCMP(opc: card(2), rD: reg_idx, rA: reg_idx0, rB: reg_idx0)
	syntax = switch(opc)
	{
		case 0: format("pcmpbf  %s,%s,%s", rD, rA, rB)
		case 1: format("DEAD    %s,%s,%s", rD, rA, rB)
		case 2: format("pcmpeq  %s,%s,%s", rD, rA, rB)
		case 3: format("pcmpne  %s,%s,%s", rD, rA, rB)
	}

	image = format("1000 %2b %s %s %s 10000000000", opc, rD, rA, rB)

	action = 
	{
		switch(opc)
		{
		case 0:
			if rA<31..24> == rB<31..24> then
				rD = 1;
			else
				if rA<23..16> == rB<23..16> then
					rD = 2;
				else
					if rA<15..8> == rB<15..8> then
						rD = 3;
					else
						if rA<7..0> == rB<7..0> then
							rD = 4;
						else
							rD = 0;
						endif;
					endif;
				endif;
			endif;

		case 2:
			if rA == rB then
				rD = 1;
			else
				rD = 0;
			endif;
		case 3:
			if rA == rB then
				rD = 0;
			else
				rD = 1;
			endif;
		};
	}

// Since these all share opcodes, they need to be the same op to keep
// the compiler happy :(
// I'm also ignoring the caching opcodes for now.
op MBlaze_typeB_UTIL(rD: reg_idx, rA: reg_idx0, imm: imm16)
	syntax = 
		switch(imm)
		{
			case 0x0001: format("sra     %s,%s", rD, rA)
			case 0x0021: format("src     %s,%s", rD, rA)
			case 0x0041: format("srl     %s,%s", rD, rA)
			case 0x0060: format("sext8   %s,%s", rD, rA)
			case 0x0061: format("sext16  %s,%s", rD, rA)
			case 0x00E0: format("clz     %s,%s", rD, rA)
			case 0x01E0: format("swapb   %s,%s", rD, rA)
			case 0x01E2: format("swaph   %s,%s", rD, rA)
			default: "DEAD"
		}

	image = format("100100 %s %s %16b", rD, rA, imm)

	action = 
	{
		switch(imm)
		{
			case 0x0001:
				rD = coerce(int(32), rA) >> 1;
				C = rA<31..31>;
			case 0x0021: 
				rD = rA >> 1;
				rD<31..31> = C;
				C = rA<31..31>;
			case 0x0041: 
				rD = rD >> 1;
				C = rA<31..31>;
			case 0x0060: 
				rD = sext32(rA, 8);
			case 0x0061: 
				rD = sext32(rA, 16);
			case 0x00E0:
				_rDST = 31;
				loop;
			case 0x01E0: 
				rD<7..0> = rA<31..24>;
				rD<15..8> = rA<23..16>;
				rD<23..16> = rA<15..8>;
				rD<31..24> = rA<7..0>;
			case 0x01E2: 
				rD<15..0> = rA<31..16>;
				rD<31..16> = rA<15..0>;
		};
	}
	
	// Borrowed from the PPC GLISS specification
	loop = 
	{
		if _rDST >= 0 then
			if rA<_rDST.._rDST> == 0 then
				_rDST = _rDST - 1;
				loop;
			else
				rD = 31 - _rDST;
			endif;
		else
			rD = 32;
		endif;
	}

op MBlaze_typeB_MTS(rA: reg_idx0, spr: card(14))
	syntax = "mts     "
	image = format("100101 00000 %s 11 %14b", rA, spr)
	action = 
	{
		// Not implementing special for now...
	}

op MBlaze_typeB_MFS(setn: bit, copy: bit, rD: reg_idx, spr: card(14))
	syntax = 
		if setn == 1 then
			"msrclr  "
		else
			if copy == 1 then
				"mfs     "
			else
				"msrset  "
			endif
		endif

	image = format("100101 %s 0000 %1b %1b 0 %14b", rD, setn, copy, spr)

	action = 
	{
		// Not implementing special for now...
	}

op MBlaze_typeA_BR(rD: reg_idx, rB: reg_idx0, abs: bit, delayed: bit, linked: bit)
	syntax = format("br%s%s%s %s,%s", 
					if abs == 1 then "a" else "" endif,
					if linked == 1 then "l" else "" endif,
					if delayed == 1 then "d" else "" endif, rD, rB)

	image = format("100110 %s %1b %1b %1b 00 %s 00000000000", rD, delayed, abs, linked, rB)

	action = 
	{
		if linked == 1 then
			rD = PC;
		endif;

		if delayed == 1 then
			DB = 1;
		else
			B = 1;
		endif;

		if abs == 1 then
			Btgt = rB;
		else
			Btgt = PC + rB;
		endif;
	}

op MBlaze_typeA_BRC(rA: reg_idx0, rB: reg_idx0, delayed: bit, cond: card(3))
	syntax = 
		if delayed == 1 then
			switch(cond)
			{
				case 0: format("beqd    %s,%s", rA, rB)
				case 1: format("bned    %s,%s", rA, rB)
				case 2: format("bltd    %s,%s", rA, rB)
				case 3: format("bled    %s,%s", rA, rB)
				case 4: format("bgtd    %s,%s", rA, rB)
				case 5: format("bged    %s,%s", rA, rB)
				default: "DEAD"
			}
		else
			switch(cond)
			{
				case 0: format("beq     %s,%s", rA, rB)
				case 1: format("bne     %s,%s", rA, rB)
				case 2: format("blt     %s,%s", rA, rB)
				case 3: format("ble     %s,%s", rA, rB)
				case 4: format("bgt     %s,%s", rA, rB)
				case 5: format("bge     %s,%s", rA, rB)
				default: "DEAD"
			}
		endif

	image = format("100111 %1b 0 %3b %s %s 00000000000", delayed, cond, rA, rB)

	action = 
	{
		switch(cond)
		{
			case 0: if coerce(int(32), rA) == 0 then B = 1; else B = 0; endif;
			case 1: if coerce(int(32), rA) != 0 then B = 1; else B = 0; endif;
			case 2: if coerce(int(32), rA) <  0 then B = 1; else B = 0; endif;
			case 3: if coerce(int(32), rA) <= 0 then B = 1; else B = 0; endif;
			case 4: if coerce(int(32), rA) >  0 then B = 1; else B = 0; endif;
			case 5: if coerce(int(32), rA) >= 0 then B = 1; else B = 0; endif;
		};

		if B == 1 then
			Btgt = PC + rB;
		endif;

		if delayed == 1 then
			DB = B;
			B = 0;
		endif;
	}

op MBlaze_typeB_logic(opc: card(2), rD: reg_idx, rA: reg_idx0)
	syntax = switch(opc)
	{
		case 0: format("ori     %s,%s,", rD, rA)
		case 1: format("andi    %s,%s,", rD, rA)
		case 2: format("xori    %s,%s,", rD, rA)
		case 3: format("andni   %s,%s,", rD, rA)
	}

	image = format("1010 %2b %s %s", opc, rD, rA)

	action = 
	{
		switch(opc)
		{
			case 0: rD = rA | immTmp;
			case 1: rD = rA & immTmp;
			case 2: rD = rA ^ immTmp;
			case 3: rD = rA & ~immTmp;
		};
	}

op MBlaze_typeB_RET(intr: bit, brk: bit, exc: bit, rA: reg_idx0)
	syntax = 
		if intr == 1 then
			format("rtid    %s,", rA)
		else
			if brk == 1 then
				format("rtbd    %s,", rA)
			else
				if exc == 1 then
					format("rted    %s,", rA)
				else
					format("rtsd    %s,", rA)
				endif
			endif
		endif

	image = format("101101 10 %1b %1b %1b %s", exc, brk, intr, rA)

	action = 
	{
		DB = 1;
		Btgt = rA + immTmp;
	}

op MBlaze_typeB_BR(rD: reg_idx, abs: bit, delayed: bit, linked: bit)
	syntax = if linked == 1 then
				format("br%sli%s %s,", 
					if abs == 1 then "a" else "" endif,
					if delayed == 1 then "d" else "" endif, rD)
			else
				format("br%si%s", 
					if abs == 1 then "a" else "" endif,
					if delayed == 1 then "d" else "" endif)
			endif

	image = format("101110 %s %1b %1b %1b 00", rD, delayed, abs, linked)

	action = 
	{
		if linked == 1 then
			rD = PC;
		endif;

		if delayed == 1 then
			DB = 1;
		else
			B = 1;
		endif;

		if abs == 1 then
			Btgt = immTmp;
		else
			Btgt = PC + immTmp;
		endif;
	}

op MBlaze_typeB_BRC(rA: reg_idx0, delayed: bit, cond: card(3))
	syntax = 
		if delayed == 1 then
			switch(cond)
			{
				case 0: format("beqid   %s,", rA)
				case 1: format("bneid   %s,", rA)
				case 2: format("bltid   %s,", rA)
				case 3: format("bleid   %s,", rA)
				case 4: format("bgtid   %s,", rA)
				case 5: format("bgeid   %s,", rA)
				default: "DEAD"
			}
		else
			switch(cond)
			{
				case 0: format("beqi    %s,", rA)
				case 1: format("bnei    %s,", rA)
				case 2: format("blti    %s,", rA)
				case 3: format("blei    %s,", rA)
				case 4: format("bgti    %s,", rA)
				case 5: format("bgei    %s,", rA)
				default: "DEAD"
			}
		endif

	image = format("101111 %1b 0 %3b %s", delayed, cond, rA)

	action = 
	{
		switch(cond)
		{
			case 0: if coerce(int(32), rA) == 0 then B = 1; else B = 0; endif;
			case 1: if coerce(int(32), rA) != 0 then B = 1; else B = 0; endif;
			case 2: if coerce(int(32), rA) <  0 then B = 1; else B = 0; endif;
			case 3: if coerce(int(32), rA) <= 0 then B = 1; else B = 0; endif;
			case 4: if coerce(int(32), rA) >  0 then B = 1; else B = 0; endif;
			case 5: if coerce(int(32), rA) >= 0 then B = 1; else B = 0; endif;
		};

		if B == 1 then
			Btgt = PC + immTmp;
		endif;

		if delayed == 1 then
			DB = B;
			B = 0;
		endif;
	}

op MBlaze_typeA_LD(half: bit, word: bit, reversed: bit, exclusive: bit, rD: reg_idx, rA: reg_idx0, rB: reg_idx0)
	syntax = format("l%s%s%s%s%s %s,%s,%s", 
					if half == 0 && word == 0 then "b" else "" endif,
					if half == 1 then "h" else "" endif,
					if word == 1 then "w" else "" endif,
					if reversed == 1 then "r" else "" endif,
					if exclusive == 1 then "x" else "" endif, rD, rA, rB)

	image = format("1100 %1b %1b %s %s %s %1b %1b 000000000", word, half, rD, rA, rB, exclusive, reversed)

	action = 
	{
		_rDST = rA + rB;

		// You had better align these yourself...
		// TODO: CHECK ENDIAN-NESS!
		if half == 0 && word == 0 then // Byte load
			rD<7..0> = M[_rDST];
			rD<31..8> = 0;
		else
			if half == 1 then
				rD<15..8> = M[_rDST + 1];
				rD<7..0> = M[_rDST + 0];
				rD<31..16> = 0;
			else
				if word == 1 then
					rD<31..24> = M[_rDST + 3];
					rD<23..16> = M[_rDST + 2];
					rD<15..8> =  M[_rDST + 1];
					rD<7..0> =   M[_rDST + 0];
				endif;
			endif;
		endif;
	}

op MBlaze_typeA_ST(half: bit, word: bit, reversed: bit, exclusive: bit, rD: reg_idx, rA: reg_idx0, rB: reg_idx0)
	syntax = format("s%s%s%s%s%s %s,%s,%s", 
					if half == 0 && word == 0 then "b" else "" endif,
					if half == 1 then "h" else "" endif,
					if word == 1 then "w" else "" endif,
					if reversed == 1 then "r" else "" endif,
					if exclusive == 1 then "x" else "" endif, rD, rA, rB)

	image = format("1101 %1b %1b %s %s %s %1b %1b 000000000", word, half, rD, rA, rB, exclusive, reversed)

	action = 
	{
		_rDST = rA + rB;

		// You had better align these yourself...
		// TODO: CHECK ENDIAN-NESS!
		if half == 0 && word == 0 then // Byte load
			M[_rDST] = rD<7..0>;
		else
			if half == 1 then
				M[_rDST + 1] = rD<15..8>;
				M[_rDST + 0] = rD<7..0>;
			else
				if word == 1 then
					M[_rDST + 3] = rD<31..24>;
					M[_rDST + 2] = rD<23..16>;
					M[_rDST + 1] = rD<15..8>;
					M[_rDST + 0] = rD<7..0>;
				endif;
			endif;
		endif;
	}

op MBlaze_typeA_FPU(rD : reg_idx, rA : reg_idx0, rB : reg_idx0, fpuop : card(6))
	syntax = switch(fpuop)
	{
		case 0:  format("fadd    %s,%s,%s", rD, rA, rB)
		case 8:  format("frsub   %s,%s,%s", rD, rA, rB)
		case 16: format("fmul    %s,%s,%s", rD, rA, rB)
		case 24: format("fdiv    %s,%s,%s", rD, rA, rB)
		case 32: format("fcmp.un %s,%s,%s", rD, rA, rB)
		case 33: format("fcmp.lt %s,%s,%s", rD, rA, rB)
		case 34: format("fcmp.eq %s,%s,%s", rD, rA, rB)
		case 35: format("fcmp.le %s,%s,%s", rD, rA, rB)
		case 36: format("fcmp.gt %s,%s,%s", rD, rA, rB)
		case 37: format("fcmp.ne %s,%s,%s", rD, rA, rB)
		case 38: format("fcmp.ge %s,%s,%s", rD, rA, rB)
		case 40: format("flt     %s,%s",    rD, rA)
		case 48: format("fint    %s,%s",    rD, rA)
		case 56: format("fsqrt   %s,%s",    rD, rA)
		default: "FPUDEAD"
	}

	image = format("010110 %s %s %s 0 %6b 0000", rD, rA, rB, fpuop)

	action = {
		// I just ain't doing this yet...

	}

op MBlaze_typeB_LDI(half: bit, word: bit, rD: reg_idx, rA: reg_idx0)
	syntax = format("l%s%s%si %s,%s,", 
					if half == 0 && word == 0 then "b" else "" endif,
					if half == 1 then "h" else "" endif,
					if word == 1 then "w" else "" endif, rD, rA)

	image = format("1110 %1b %1b %s %s", word, half, rD, rA)

	action = 
	{
		_rDST = rA + immTmp;

		// You had better align these yourself...
		// TODO: CHECK ENDIAN-NESS!
		if half == 0 && word == 0 then // Byte load
			rD<7..0> = M[_rDST];
			rD<31..8> = 0;
		else
			if half == 1 then
				rD<15..8> = M[_rDST + 1];
				rD<7..0> = M[_rDST + 0];
				rD<31..16> = 0;
			else
				if word == 1 then
					rD<31..24> = M[_rDST + 3];
					rD<23..16> = M[_rDST + 2];
					rD<15..8> =  M[_rDST + 1];
					rD<7..0> =   M[_rDST + 0];
				endif;
			endif;
		endif;
	}

op MBlaze_typeB_STI(half: bit, word: bit, rD: reg_idx, rA: reg_idx0)
	syntax = format("s%s%s%si %s,%s,", 
					if half == 0 && word == 0 then "b" else "" endif,
					if half == 1 then "h" else "" endif,
					if word == 1 then "w" else "" endif, rD, rA)

	image = format("1111 %1b %1b %s %s", word, half, rD, rA)

	action = 
	{
		_rDST = rA + immTmp;

		// You had better align these yourself...
		// TODO: CHECK ENDIAN-NESS!
		if half == 0 && word == 0 then // Byte load
			M[_rDST] = rD<7..0>;
		else
			if half == 1 then
				M[_rDST + 1] = rD<15..8>;
				M[_rDST + 0] = rD<7..0>;
			else
				if word == 1 then
					M[_rDST + 3] = rD<31..24>;
					M[_rDST + 2] = rD<23..16>;
					M[_rDST + 1] = rD<15..8>;
					M[_rDST + 0] = rD<7..0>;
				endif;
			endif;
		endif;
	}